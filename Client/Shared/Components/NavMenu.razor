@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager UriHelper

<nav id="menu">
    <div class="inner">
        <h2>Menu</h2>
        <ul>
            <li><a href="/" class="@Home">Home</a></li>
            <AuthorizeView Roles="Supplier">
                <Authorized>
                    <li style="display:@oldShop"><a href="/online_shop" class="@OnlineShop">Online Shop</a></li>
                </Authorized>
            </AuthorizeView>
            <li><a href="/marketplace" class="@Marketplace">Marketplace</a></li>
            <AuthorizeView Roles="Customer">
                <Authorized>
                    <li><a href="/view_cart" class="@Cart">Cart</a></li>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <li><a href="/profile" class="@Profile">Profile</a></li>
                    <li><a @onclick="LogOut" href="">Logout</a></li>
                </Authorized>
                <NotAuthorized>
                    <li>
                        <a class="dropdown-toggle">Login</a>

                        <ul>
                            <li><a href="/login_customer" class="@LoginCus">As a Customer</a></li>
                            <li><a href="/login_supplier" class="@LoginSup">As a Supplier</a></li>
                        </ul>
                    </li>
                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </div><a class="close" href="#menu">Close</a>
</nav>
@code {
    [Parameter]
    public string NavItem { get; set; }
    public string Home, LoginCus, LoginSup, OnlineShop, Marketplace, Profile, Cart;
    private string oldShop="none";

    protected override async Task OnInitializedAsync()
    {
        switch (NavItem)
        {
            case "HomeNav":
                Home = "active";
                break;
            case "LoginCusNav":
                LoginCus = "active";
                break;
            case "LoginSupNav":
                LoginSup = "active";
                break;
            case "OnlineShopNav":
                OnlineShop = "active";
                break;
            case "Marketplace":
                Marketplace = "active";
                break;
            case "Profile":
                Profile = "active";
                break;
            case "Cart":
                Cart = "active";
                break;
            default:
                break;
        }

        var response = await Http.GetAsync("api/Login/1");
        if (response.IsSuccessStatusCode)
        {
            IsNewShop(false);
        }
        else
        {
            IsNewShop(true);
        }

        base.OnInitialized();
    }

    async void LogOut()
    {
        await Http.DeleteAsync("api/Login");
        await AuthStateProvider.GetAuthenticationStateAsync();
        UriHelper.NavigateTo("/");
    }

    public void IsNewShop(bool value)
    {
        if (value)
        {
            oldShop = "none";
        }
        else
        {
            oldShop = "";
        }
    }
}
