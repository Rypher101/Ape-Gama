@page "/confirm_order/{shopID}"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Customer")]
@inject IDialogService DS

<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
    <HomeHeader />
    <div class="main">
        <div class="row align-content-center">
            <div class="col-md-8 offset-2">
                <h2 class="h2"><center>Confirm order details</center></h2>
                @if (itemsInOrder)
                {
                    <div class="form-group">
                        <h5 class="h5"><i>Shop Name : </i></h5>
                        <div class="col-md-11 offset-1"><h6 class="h6"><b>@orderModel.shop</b></h6></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Total Cost : </i></h5>
                        <div class="col-md-11 offset-1"><h6 class="h6"><b>Rs. @orderModel.total</b></h6></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Delivery Address</i></h5>
                        <div class="col-md-11 offset-1"><input type="text" class="form-control rounded-left" placeholder="Address" required @bind-value="@orderModel.address"></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Customer Contact No</i></h5>
                        <div class="col-md-11 offset-1"><input type="text" class="form-control rounded-left" placeholder="Contact No" required @bind-value="@orderModel.contact" @onblur="tpCheck"></div>
                    </div>
                    <br>
                    <br>  
                        <div class="form-group">
                            <button class="primary" style="width:100%" @onclick="ConfirmOrderBtn">Confirm Order</button>
                        </div>
                }else{
                    <h5 class="h5"><center>Sorry, There are no orders found.</center></h5>
                }
            </div>
        </div>
    </div>
</div>

<NavMenu NavItem="Orders" />
<div style="display:@loadingIcon">
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true"/>
</div>
@code {
    [Parameter]
    public string shopID { get; set; }
    private ConfirmOrderModel orderModel = new ConfirmOrderModel();
    private string stock, price, pointerEvent, loadingIcon = "none", originalTP;
    private double opacity = 1;
    private int qty = 0;
    private bool itemsInOrder = false;

    void isLoading(bool value)
    {
        if (value)
        {
            loadingIcon = "";
            pointerEvent = "none";
            opacity = 0.25;
        }
        else
        {
            loadingIcon = "none";
            pointerEvent = "";
            opacity = 1;
        }
    }

     protected override async Task OnInitializedAsync()
    {
        isLoading(true);
        orderModel = await http.GetFromJsonAsync<ConfirmOrderModel>("api/Cart/ConfirmOrder/" + shopID);
        isLoading(false);

        if (orderModel == null)
            itemsInOrder = false;
        else
        {
            itemsInOrder = true;
            originalTP = orderModel.contact;
        }
    }

     void tpCheck()
    {
        if(!System.Text.RegularExpressions.Regex.IsMatch(orderModel.contact, "^[0-9]*$"))
        {
            orderModel.contact = originalTP;
            SB.Add("Invalid contact number. Please check again", Severity.Error);
        }
    }

    async Task ConfirmOrderBtn()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you want to place this order? This process cannot be undone.");
        parameters.Add("ButtonText", "Confirm");
        parameters.Add("color", Color.Error);

        var options = new DialogOptions() {DisableBackdropClick = true,  };
        var result = await DS.Show<DialogBox>("Confirm Order", parameters, options).Result;

        if (!result.Cancelled)
        {
            var response = await http.PostAsJsonAsync<ConfirmOrderModel>("api/Order/ConfirmOrder", orderModel);
            if (response.IsSuccessStatusCode)
            {
                var oID = await response.Content.ReadAsStringAsync();
                SB.Add("Order placed. Order ID : " + oID);
                UriHelper.NavigateTo("/view_order/" + oID);
            }
            else
            {
                SB.Add("Error occored while placing the order. Please try again!", Severity.Error);
            }
        }     
    }
}
