@page "/view_cart"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Customer")]

<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
	<HomeHeader />
	<div class="main">
		<div class="row align-content-center">
			<div class="col-md-8 offset-2">
				<h2 class="h2"><center>Shoping Cart</center></h2>
				<br />
				@if (itemsInCart)
				{
					foreach (var item in gropedList)
					{
						<h3 class="h3">Shop Name : @item.Key</h3>
						<table class="table">
							<thead>
								<tr>
									<th>
										Product Name
									</th>
									<th style="text-align:right;">
										QTY
									</th>
									<th style="text-align:right;">
										Cost (Per Unit)
									</th>
									<th style="text-align:right;">
										Cost
									</th>
									<th></th>
								</tr>
							</thead>
							<tbody>
								@{
									decimal tot = 0;
								}
								@foreach (var prod in item)
								{

									var cost = prod.price * prod.qty;
									<tr>
										<td>
											<h6 class="h6"><b>@prod.product</b></h6>
										</td>
										<td align="right">
											<h6 class="h6"><b>@prod.qty</b></h6>
										</td>
										<td align="right">
											<h6 class="h6"><b>Rs. @prod.price</b></h6>
										</td>
										<td align="right">
											<h6 class="h6"><b>Rs. @cost</b></h6>
										</td>
										<td>
											<MudIconButton Icon="@Icons.Material.Filled.Assessment" Color="Color.Default" @onclick="@(()=>ViewItem(prod.prodID))" Style="box-shadow:none; height:auto" />
										</td>
									</tr>
									tot += cost;
								}
								<tr>
									<td colspan="3" align="right">
										<b>Total: </b>
									</td>
									<td align="right">
										Rs: @tot
									</td>
								</tr>
							</tbody>
						</table>
						<div class="form-group">
							<button class="primary" style="width:100%" @onclick="e=>ConfirmOrder(shopID)">Proceed with this order</button>
						</div>
						<br>
						<br>
					}
				}
				else
				{
					<h5 class="h5"><center>Sorry, There are no items in the cart.</center></h5>
				}
			</div>
		</div>
	</div>
</div>

<NavMenu NavItem="Cart" />
<div style="display:@loadingIcon">
	<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true" />
</div>

@code {
	private List<CartModel> cartModel = new List<CartModel>();
	private List<IGrouping<string, CartModel>> gropedList;
	private string stock, price, pointerEvent, loadingIcon = "none";
	private double opacity = 1;
	private int qty = 0, shopID;
	private bool itemsInCart = false;

	void isLoading(bool value)
	{
		if (value)
		{
			loadingIcon = "";
			pointerEvent = "none";
			opacity = 0.25;
		}
		else
		{
			loadingIcon = "none";
			pointerEvent = "";
			opacity = 1;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		isLoading(true);
		cartModel = await http.GetFromJsonAsync<List<CartModel>>("api/Cart/GetCartDetails");
		isLoading(false);

		if (cartModel == null || cartModel.Count == 0)
			itemsInCart = false;
		else
		{
			shopID = cartModel.First().shopID;
			gropedList = cartModel.GroupBy(e => e.shopName).ToList();
			itemsInCart = true;
		}

	}

	void QTYCheck(int i)
	{
		if (!string.IsNullOrWhiteSpace(cartModel[i].qtyString))
		{
			int qty;
			if (Int32.TryParse(cartModel[i].qtyString, out qty))
			{
				if (qty < 0)
				{
					cartModel[i].qtyString = cartModel[i].qty.ToString();
					SB.Add("Invalid Quantity. Please Re-Enter", Severity.Error);
				}
				else
				{
					cartModel[i].qty = qty;
				}
			}
			else
			{
				cartModel[i].qtyString = cartModel[i].qty.ToString();
				SB.Add("Invalid Quantity. Please Re-Enter", Severity.Error);
			}
		}
	}

	void ConfirmOrder(int id)
	{
		UriHelper.NavigateTo("/confirm_order/" + id);
	}

	void ViewItem(int id)
	{
		UriHelper.NavigateTo("/view_product/" + id);
	}
}
