@page "/register_customer"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http
@inject NavigationManager UriHelper

<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
    <HomeHeader />
    <div class="main">
        <div class="row align-content-center" style="padding-top:70px; padding-bottom:70px">
            <div class="col-md-4 offset-4">
                <h2 class="h2"><center>Customer Registration</center></h2>
                <br />
                <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Name" required @bind-value="userModel.UserName">
                    </div>
                    <div class="form-group">
                        <input type="email" class="form-control rounded-left" placeholder="Email" required @bind-value="userModel.UserEmail">
                    </div>
                    <div class="form-group">
                        <input type="@pass" class="form-control rounded-left" placeholder="Password" required @onmousemove="()=>SetToText(1)" @onmouseout="()=>SetToPass(1)" @bind-value="passVal" @bind-value:event="oninput" style="color:@passColor" @onkeyup="CheckPassword">
                    </div>
                    <div class="form-group">
                        <input type="@passConf" class="form-control rounded-left" placeholder="Confirm Password" required @onmousemove="()=>SetToText(2)" @onmouseout="()=>SetToPass(2)" @bind="passConfVal" @bind:event="oninput" style="color:@passColor" @onkeyup="CheckPassword">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Contact Number" required @bind-value="userModel.UserTp" @onblur="TPCheck">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Address" required @bind-value="userModel.UserAddress">
                    </div>
                    <div class="form-group align-items-center">
                        <div class="justify-content-end">
                            <button class="primary" style="width:100%">Register</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <HomeFooter></HomeFooter>
</div>
<NavMenu NavItem="LoginSupNav" />
<div style="display:@loadingIcon">
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true" />
</div>

@code {
    private string pass { get; set; } = "password";
    private string passConf { get; set; } = "password";
    private bool validPassword = false, validTP = false;
    private string passConfVal, passColor, passVal, pointerEvent, loadingIcon = "none";
    private double opacity = 1;
    private UserModel userModel = new UserModel();

    void ToSignUp()
    {
        UriHelper.NavigateTo("register_customer");
    }

    void SetToText(int x)
    {
        switch (x)
        {
            case 1:
                pass = "text";
                break;
            case 2:
                passConf = "text";
                break;
        }
    }

    void SetToPass(int x)
    {
        switch (x)
        {
            case 1:
                pass = "password";
                break;
            case 2:
                passConf = "password";
                break;
        }
    }

    void CheckPassword()
    {
        if (passVal == passConfVal)
        {
            validPassword = true;
            passColor = "";
        }
        else
        {
            validPassword = false;
            passColor = "lightcoral";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (validPassword && validTP)
        {
            userModel.UserPass = passVal;
            userModel.ShaEnc();

            isLoading(true);
            var response = await http.PostAsJsonAsync("api/Users", userModel);
            isLoading(false);

            if (response.IsSuccessStatusCode)
            {
                UriHelper.NavigateTo("login_customer/ /Customer registered!");
            }
            else if(response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {

                SB.Add("This email address already exists. Please use another Email address", Severity.Error);
            }
            else
            {
                UriHelper.NavigateTo("login_customer/Customer registration faild. Please try again./%20");
            }
        }
        else
        {
            if (!validPassword) SB.Add("Confirm password mismatch", Severity.Error);
            if (!validTP) SB.Add("Invalid Contact Number", Severity.Error);
        }

    }

    void TPCheck()
    {
        if (!int.TryParse(userModel.UserTp, out _))
        {
            userModel.UserTp = "";
            SB.Add("Invalid Contact Number", Severity.Error);
            validTP = false;
        }
        else
        {
            validTP = true;
        }
    }

    void isLoading(bool value)
    {
        if (value)
        {
            loadingIcon = "";
            pointerEvent = "none";
            opacity = 0.25;
        }
        else
        {
            loadingIcon = "none";
            pointerEvent = "";
            opacity = 1;
        }
    }
}