@page "/view_product/{prodID}"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http

<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
	<HomeHeader />
	<div class="main">
		<div class="row align-content-center">
			<div class="col-md-8 offset-2">
				<h2 class="h2"><center>Product : @productModel.ProdName</center></h2>
				<br />
				<br />
				<div class="form-group">
					<h5 class="h5"><i>Description</i></h5>
					<div class="col-md-11 offset-1"><h6 class="h6"><b>@productModel.ProdDescription</b></h6></div>
				</div>
				<div class="form-group">
					<h5 class="h5"><i>Stock</i></h5>
					<div class="col-md-11 offset-1"><h6 class="h6"><b>@productModel.ProdStock</b></h6></div>
				</div>
				<div class="form-group">
					<h5 class="h5"><i>Price (Rs.)</i></h5>
					<div class="col-md-11 offset-1"><h6 class="h6"><b>@productModel.ProdPrice</b></h6></div>
				</div>
				@if (notOos)
				{
					<AuthorizeView Roles="Customer">
						<Authorized>
							<div class="form-group">
								<h5 class="h5"><i>Quantity</i></h5>
								<div class="col-md-11 offset-1"><input type="text" class="form-control rounded-left" placeholder="QTY" required @bind-value="qtyTemp" @onblur="QTYCheck"></div>
							</div>
						</Authorized>
					</AuthorizeView>
				}
				<div class="form-group">
					<br />
					<MudGrid>
						@foreach (var item in productModel.ImageList)
						{
							<MudItem>
								<img src="@item.fileString" style="max-height:300px; max-width:300px; border-radius:5%" />
							</MudItem>
						}
					</MudGrid>
				</div>
				<div class="form-group">
					<MudExpansionPanels Elevation="4">
						<MudExpansionPanel Text="Reviews" MaxHeight="400">
							<TitleContent>
								<MudContainer Class="d-inline-flex">
									<h5 class="h5"><i>Reviews</i></h5>
									<MudRating SelectedValue="avgRating" ReadOnly="true" Class="mr-2 ml-auto" Color="Color.Primary" />
								</MudContainer>
							</TitleContent>
							<ChildContent>
								<MudContainer Style="max-height: 370px; overflow-y: scroll">
									@foreach (var item in reviews)
									{
										<MudPaper Elevation="3" Class="my-5">
											<MudField Variant="Variant.Outlined" Class="px-3 py-3">
												<MudRating SelectedValue="item.Rate" ReadOnly="true" Color="Color.Primary" /><br /><br />
												@item.Review1
											</MudField>
										</MudPaper>
									}
								</MudContainer>
							</ChildContent>
						</MudExpansionPanel>
					</MudExpansionPanels>
				</div>
				<br />
				<br />
				<div class="form-group">
					<div class="row">
						<AuthorizeView Roles="Customer">
							<Authorized>
								<button class="primary" style="width:47%" @onclick="@(()=>UriHelper.NavigateTo("/review_product/" + productModel.ProdId, forceLoad: true))">Add Review</button>
								@if (notOos)
								{
									<button class="primary mr-2 ml-auto" style="width:47%" @onclick="AddToCart">Add to Cart</button>
								}
							</Authorized>
						</AuthorizeView>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<NavMenu />
<div style="display:@loadingIcon">
	<MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true" />
</div>

@code {
	[Parameter]
	public string prodID { get; set; }
	private ProductModel productModel = new ProductModel();
	private List<ReviewModel> reviews = new();
	private string stock, price, pointerEvent, loadingIcon = "none", qtyTemp = "0";
	private double opacity = 1;
	private int qty = 0, avgRating = 0;
	private bool notOos = true;

	void isLoading(bool value)
	{
		if (value)
		{
			loadingIcon = "";
			pointerEvent = "none";
			opacity = 0.25;
		}
		else
		{
			loadingIcon = "none";
			pointerEvent = "";
			opacity = 1;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		isLoading(true);
		productModel = await http.GetFromJsonAsync<ProductModel>("api/Product/GetProductModel/" + prodID);
		reviews = await http.GetFromJsonAsync<List<ReviewModel>>("api/Review/GetReviews/" + prodID);
		isLoading(false);

		if (reviews.Count > 0)
		{
			foreach (var item in reviews)
			{
				avgRating += item.Rate;
			}
			avgRating = avgRating / reviews.Count();
		}

		if (productModel.ProdStock < 1) notOos = false;
		qtyTemp = productModel.qty.ToString();
	}

	private void QTYCheck()
	{
		if (!string.IsNullOrWhiteSpace(qtyTemp))
		{
			if (!Int32.TryParse(qtyTemp, out qty) || qty < 0)
			{
				qtyTemp = productModel.qty.ToString();
				SB.Add("Invalid Quantity. Please Re-Enter", Severity.Error);
			}
		}
	}

	private async Task AddToCart()
	{
		if (qty < 0)
		{
			SB.Add("Invalid Quantity. Please Re-Enter", Severity.Error);
		}
		else
		{
			var temp = new CartModel();
			temp.prodID = productModel.ProdId;
			temp.qty = qty;

			var response = await http.PostAsJsonAsync<CartModel>("api/Cart/AddToCart", temp);

			if (response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				SB.Add("Item added to cart");
				StateHasChanged();
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.Accepted)
			{
				SB.Add("Removed from cart");
			}
		}
	}
}
