@page "/online_shop"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http

<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
    <HomeHeader />
    <div class="main">
        <div class="row align-content-center" style="padding-top:10px; padding-left:40px; padding-right:40px">
            <div class="col-md-12">
                <h2 class="h2"><center>Products</center></h2> 
                <br />

                <MudGrid Spacing="2" Justify="Justify.Center">
                    @{int i = 0;}
                    @foreach (var item in products)
                    {
                        string img = imgList[i];
                        <MudItem>
                            <MudCard Elevation="10" Style="max-width:300px">
                                <MudCardMedia Image="@img" Height="200" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h5" Style="padding-bottom:10px">@item.ProdName </MudText>
                                    <MudText Typo="Typo.body2" Style="padding-bottom:10px">@item.ProdDescription</MudText>
                                    <MudDivider />
                                    <MudText Typo="Typo.subtitle2" Style="padding-bottom:10px; padding-top:10px">Stock : @item.ProdStock</MudText>
                                    <MudText Typo="Typo.subtitle2" Style="padding-bottom:10px">Price : Rs. @item.ProdPrice</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        i = (i + 1) % 6;
                    }
                </MudGrid> 
            </div>
        </div>
    </div>
</div>
<MudButton Style="border-radius:100px; bottom:40px; left:40px; position:fixed; " Variant="Variant.Filled" Class="primary" @onclick="OpenDrawer"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
<NavMenu NavItem="OnlineShopNav" @ref="navBar" />
<div style="display:@loadingIcon">
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true" />
</div>
<MudDrawer @bind-Open="@drawerStatus" Anchor="Anchor.Bottom" DisableOverlay="false" Elevation="10" Variant="@DrawerVariant.Temporary" Style="--mud-drawer-content-height:544px !important">
    <AddProduct CloseDrawer="OpenDrawer" RefreshProducts="RefreshProducts"></AddProduct>
</MudDrawer>

@code {
    private string pointerEvent, loadingIcon = "none";
    private double opacity = 1;
    private NavMenu navBar;
    private List<ProductModel> products = new List<ProductModel>();
    private bool drawerStatus = false;
    private List<string> imgList = new List<string>() {
        "images/Product/prod1.jpg",
        "images/Product/prod2.jpg",
        "images/Product/prod3.jpg",
        "images/Product/prod4.jpeg",
        "images/Product/prod5.png",
        "images/Product/prod6.jpg"
    };

    protected override async Task OnInitializedAsync ()
    {
        products = await http.GetFromJsonAsync<List<ProductModel>>("api/Product/GetProducts");
    }

    void isLoading(bool value)
    {
        if (value)
        {
            loadingIcon = "";
            pointerEvent = "none";
            opacity = 0.25;
        }
        else
        {
            loadingIcon = "none";
            pointerEvent = "";
            opacity = 1;
        }
    }

    public void OpenDrawer()
    {
        if (drawerStatus)
        {
            drawerStatus = false;
        }
        else
        {
            drawerStatus = true;
        }
    }

    public async void RefreshProducts()
    {
        products = await http.GetFromJsonAsync<List<ProductModel>>("api/Product/GetProducts");
        OpenDrawer();
    }
}