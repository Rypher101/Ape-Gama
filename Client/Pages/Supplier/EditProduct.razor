@page "/edit_product/{prodID}"
@inject NavigationManager UriHelper
@inject ISnackbar SB
@inject HttpClient http
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Supplier")]
@inject IDialogService DS


<div id="wrapper" style="pointer-events:@pointerEvent; opacity:@opacity">
    <HomeHeader />
    <div class="main">
        <div class="row align-content-center">
            <div class="col-md-8 offset-2">
                <h2 class="h2"><center>Edit Product</center></h2>
                <EditForm Model="@productModel" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <h5 class="h5"><i>Product Name</i></h5>
                        <div class="col offset-1"><input type="text" class="form-control rounded-left" placeholder="Product" required @bind="productModel.ProdName"></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Description</i></h5>
                        <div class="col offset-1"><MudTextField T="string" Variant="Variant.Text" @bind-Value="productModel.ProdDescription" Lines="2" /></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Stock</i></h5>
                        <div class="col offset-1"><input type="text" class="form-control rounded-left" placeholder="Stock" required @bind-value="stock" @onblur="StockCheck"></div>
                    </div>
                    <div class="form-group">
                        <h5 class="h5"><i>Price (Rs.)</i></h5>
                        <div class="col offset-1"><input type="text" class="form-control rounded-left" placeholder="Price Per Unit" required @bind-value="price" @onblur="PriceCheck"></div>
                    </div>
                    <div class="form-group">
                        <br />
                        <InputFile id="fileInput" OnChange="UploadFile" hidden multiple accept=".jpg" />
                        <MudButton HtmlTag="label" Style="width:100%; box-shadow:inset" Class="primary" Variant="Variant.Filled" for="fileInput">Add Image</MudButton>
                        <br />
                        <br />
                        <MudGrid>
                            @{
                                int i = 0;
                            }
                            @foreach (var item in productModel.ImageList)
                            {
                                <MudItem>
                                    <img src="@item.fileString" style="max-height:300px; max-width:300px; border-radius:5%" @onclick="@(e=>openDrawer(item.ImgId))" />
                                </MudItem>
                                i++;
                            }
                        </MudGrid>
                    </div>
                    <br />
                    <div class="form-group align-items-center">
                        <div class="justify-content-end">
                            <button class="primary" style="width:100%">Save</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<MudDrawer @bind-Open="@drawerOpen" Anchor="Anchor.Left" Elevation="1" Variant="@DrawerVariant.Temporary" Width="500px" ZIndex="200">
    @if (selectedImg != -1)
    {<br />
        <div>
            <div class="row">
                <div class="col-md-12">
                    <h2 class="h2"><center>Image Settings</center></h2>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-12">
                    <center>
                        <img src="@productModel.ImageList.FirstOrDefault(e=>e.ImgId == selectedImg).fileString" style="max-height:300px; max-width:300px; border-radius:5%" />
                    </center>
                </div>
            </div>
            <br />
            <div class="col-md-10 offset-1">
                <center>
                    <MudTooltip Text="@toolTip" Style="font-size:20px" Placement="Placement.Top">
                        <MudToggleIconButton Toggled="@productModel.ImageList.FirstOrDefault(e=>e.ImgId == selectedImg).isDP" ToggledChanged="onDPChange"
                                             Icon="@Icons.Material.Outlined.ThumbUp" Color="@Color.Error" Title="This is the display image"
                                             ToggledIcon="@Icons.Material.Filled.ThumbUp" ToggledColor="@Color.Success" ToggledTitle="This is not the display image" Style="box-shadow:none;" Size="Size.Large" ToggledSize="Size.Large" />
                    </MudTooltip>
                </center>
            </div>
            <div class="col-md-10 offset-1">
                <center>
                    <MudTooltip Text="Delete Picture" Style="font-size:20px" Placement="Placement.Bottom">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Style="box-shadow:none; " Size="Size.Large" OnClick="deleteImg"/>
                    </MudTooltip>
                </center>
            </div>
        </div>
    }
</MudDrawer>

<NavMenu NavItem="OnlineShopNav" />
<div style="display:@loadingIcon">
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;position:fixed;top:50%;left:50%;" Indeterminate="true"/>
</div>

@code {
    [Parameter]
    public string prodID { get; set; }
    private ProductModel productModel = new ProductModel();
    private string stock, price, pointerEvent, loadingIcon = "none", toolTip;
    private double opacity = 1;
    private bool validStock = false, validPrice = false, overlayVisible = false, drawerOpen = false;
    private List<IBrowserFile> loadedFiles = new();
    private List<string> loadedFileUrl = new();
    private int idNum = 0, selectedImg = -1;
    //private List<ImageModel> imgModel = new();

    private class imgClass
    {
        public int id;
        public IBrowserFile loadedFile;
        public string loadedFileUrl;
        public bool isDP = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading(true);
        productModel = await http.GetFromJsonAsync<ProductModel>("api/Product/GetProductModel/" + prodID);
        stock = productModel.ProdStock.ToString();
        price = productModel.ProdPrice.ToString();
        isLoading(false);
    }

    private async Task HandleValidSubmit()
    {
        StockCheck();
        PriceCheck();
        if (validPrice & validStock)
        {
            productModel.ProdStock = int.Parse(stock);
            productModel.ProdPrice = decimal.Parse(price);
            productModel.ProdStatus = true;

            var response = await http.PostAsJsonAsync("api/Product/PutProductModel", productModel);
            if (response.IsSuccessStatusCode)
            {
                SB.Add("Product Registered!");
            }
            else
            {
                SB.Add("Couldn't Register product");
            }
        }
    }

    void StockCheck()
    {
        if (!int.TryParse(stock, out _))
        {
            stock = "";
            SB.Add("Invalid Stock Value", Severity.Error);
            validStock = false;
        }
        else
        {
            validStock = true;
        }
    }

    void PriceCheck()
    {
        if (!decimal.TryParse(price, out _))
        {
            price = "";
            SB.Add("Invalid Price Value", Severity.Error);
            validPrice = false;
        }
        else
        {
            validPrice = true;
        }
    }

    void ClearContent()
    {
        productModel.ProdName = "";
        productModel.ProdDescription = "";
        stock = "";
        price = "";
    }

    private async Task GetFiles()
    {    
        //imgModel = await http.GetFromJsonAsync<List<ImageModel>>("api/Product/GetProductImages/" + prodID);
        productModel = await http.GetFromJsonAsync<ProductModel>("api/Product/GetProductModel/" + prodID);
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var temp = new ImageModel();
        //temp.File = (e.File);
        temp.ProdId = int.Parse(prodID);
        temp.ImgName = e.File.Name;
        var buffers = new byte[e.File.Size];
        await e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(buffers);
        string imageType = e.File.ContentType;
        temp.fileString = Convert.ToBase64String(buffers);

        isLoading(true);
        var response = await http.PostAsJsonAsync("api/Product/ProductImageUpload", temp);
        isLoading(false);

        if (response.IsSuccessStatusCode)
        {
            SB.Add("Image Uploaded");
            await GetFiles();
        }
        else
        {
            SB.Add("Image uploading failed. Please try again", Severity.Error);
        }

    }

    void isLoading(bool value)
    {
        if (value)
        {
            loadingIcon = "";
            pointerEvent = "none";
            opacity = 0.25;
        }
        else
        {
            loadingIcon = "none";
            pointerEvent = "";
            opacity = 1;
        }
    }

    async Task onDPChange(bool toggled)
    {
        if (toggled)
        {
            foreach (var item in productModel.ImageList)
            {
                if (item.ImgId == selectedImg)
                {
                    var response = await http.PostAsJsonAsync<ImageModel>("api/Product/ChangeDP/", item);
                    if (response.IsSuccessStatusCode)
                    {
                        item.isDP = true;
                        isLoading(true);
                        await GetFiles();
                        isLoading(false);
                        SB.Add("Display picture changed");
                        toolTip = "This is already marked as disply picture";
                    }
                    else
                    {
                        SB.Add("Display picture changing faild. Please try again.", Severity.Error);
                    }

                }
                else
                {
                    item.isDP = false;
                }
            }
        }
    }

    void openDrawer(int i)
    {
        if (drawerOpen) drawerOpen = false;
        else drawerOpen = true;
        selectedImg = i;
        if (productModel.ImageList.FirstOrDefault(e=>e.ImgId == selectedImg).isDP)
        {
            toolTip = "This is already marked as disply picture";
        }
        else
        {
            toolTip = "Mark this as display picture";
        }
    }

    async Task deleteImg()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("color", Color.Error);

        var options = new DialogOptions() {DisableBackdropClick = true,  };
        drawerOpen = !drawerOpen;
        var result = await DS.Show<DialogBox>("Delete", parameters, options).Result;

        if (!result.Cancelled)
        {
            var tempImg = productModel.ImageList.FirstOrDefault(e=>e.ImgId == selectedImg);
            var response = await http.PostAsJsonAsync<ImageModel>("api/Product/DeleteImage/", tempImg);

            if (response.IsSuccessStatusCode)
            {
                SB.Add("Image deleted.");
                selectedImg = -1;
                isLoading(true);
                await GetFiles();
                isLoading(false);
            }
            else
            {
                SB.Add("Deleting image changing faild. Please try again.", Severity.Error);
                drawerOpen = !drawerOpen;
            }
        }
        else
        {
            drawerOpen = !drawerOpen;
        }

    }
}
