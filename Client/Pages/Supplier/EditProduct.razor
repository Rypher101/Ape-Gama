@page "/edit_product/{prodID}"
@inject ISnackbar SB
@inject HttpClient http

<div id="wrapper">
    <div class="main">
        <div class="row align-content-center" style="padding-top:70px; padding-bottom:70px">
            <div class="col-md-4 offset-2">
                <h2 class="h2"><center>New Product</center></h2>
                <EditForm Model="@productModel" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Product" required @bind-value="productModel.ProdName">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Description" required @bind-value="productModel.ProdDescription">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Stock" required @bind-value="stock" @onblur="StockCheck">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control rounded-left" placeholder="Price Per Unit" required @bind-value="price" @onblur="PriceCheck">
                    </div>
                    <div class="form-group align-items-center">
                        <div class="justify-content-end">
                            <button class="primary" style="width:100%">Add Product</button>
                        </div>
                    </div>
                    <div class="form-group align-items-center">
                        <div class="justify-content-end">
                            <button class="primary" style="width:100%" @onclick="ClearContent">Clear</button>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div>
                <h2 style="padding-top:10px">Images</h2>
                <InputFile id="fileInput" OnChange="GetFiles" hidden multiple accept=".jpg, .jpeg, .png" />
                <MudGrid>
                    <MudItem>
                        <MudButton Style="height: 100px; width: 100px; word-wrap:break-word" Variant="Variant.Filled" Class="primary" HtmlTag="label" for="fileInput"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
                    </MudItem>
                    @foreach (var item in imgList)
                    {
                        <MudItem>
                            <img src="@item.loadedFileUrl" style="max-height:300px; max-width:300px" />
                            @*<MudButton Style="height:100px; width:100px" OnClick="@(e=>OpenImg(item))">
                                    <MudCard Elevation="10" Style="min-width:100px">
                                        <MudCardMedia Image="@item.loadedFileUrl" Height="100" />
                                    </MudCard>
                                </MudButton>*@
                        </MudItem>

                    }
                </MudGrid>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int prodID { get; set; }
    private ProductModel productModel = new ProductModel();
    private string stock, price;
    private bool validStock = false, validPrice = false, overlayVisible = false;
    private List<IBrowserFile> loadedFiles = new();
    private List<string> loadedFileUrl = new();
    private int idNum = 0;
    private List<imgClass> imgList = new();
    private imgClass selectedImg = null;

    private class imgClass
    {
        public int id;
        public IBrowserFile loadedFile;
        public string loadedFileUrl;
        public bool isDP = false;
    }

    private async Task HandleValidSubmit()
    {
        if (validPrice & validStock)
        {
            productModel.ProdStock = int.Parse(stock);
            productModel.ProdPrice = decimal.Parse(price);
            productModel.ProdStatus = true;

            var response = await http.PostAsJsonAsync("api/Product/PostProductModel", productModel);
            if (response.IsSuccessStatusCode)
            {
                SB.Add("Product Registered!");
            }
            else
            {
                SB.Add("Couldn't Register product");
            }
        }
    }

    void StockCheck()
    {
        if (!int.TryParse(stock, out _))
        {
            stock = "";
            SB.Add("Invalid Stock Value", Severity.Error);
            validStock = false;
        }
        else
        {
            validStock = true;
        }
    }

    void PriceCheck()
    {
        if (!decimal.TryParse(price, out _))
        {
            price = "";
            SB.Add("Invalid Price Value", Severity.Error);
            validPrice = false;
        }
        else
        {
            validPrice = true;
        }
    }

    void ClearContent()
    {
        productModel.ProdName = "";
        productModel.ProdDescription = "";
        stock = "";
        price = "";
    }

    private async Task GetFiles(InputFileChangeEventArgs e)
    {
        var temp = new imgClass();
        temp.id = ++idNum;
        temp.loadedFile = (e.File);

        try
        {
            IBrowserFile imgFile = e.File;
            var buffers = new byte[imgFile.Size];
            await imgFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(buffers);
            string imageType = imgFile.ContentType;
            temp.loadedFileUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

            imgList.Add(temp);
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    void OpenImg(imgClass x)
    {
        selectedImg = x;
        overlayVisible = true;
    }

    void ToggleOverlay()
    {
        selectedImg = null;
        overlayVisible = false;
    }
}
